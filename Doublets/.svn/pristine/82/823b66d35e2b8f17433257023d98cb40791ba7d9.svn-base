import java.util.PriorityQueue;

public class PriorityQueueChainManager extends ChainManager {

	private PriorityQueue<Chain> priorityQueue = new PriorityQueue<Chain>();
	private String end;

	public PriorityQueueChainManager(String end) {
		this.end = end;
	}

	@Override
	public void add(Chain chain) {
		priorityQueue.add(chain);
	}

	@Override
	public Chain next() {
		// TODO Auto-generated method stub.
		Chain removeChain = priorityQueue.peek();
		for (Chain c : priorityQueue) {

		}
		priorityQueue.remove(removeChain);
		return removeChain;
	}

	@Override
	public boolean isEmpty() {
		return priorityQueue.isEmpty();
	}

	private int numOfCharSame(String now) {
		int sameChar = 0;
		if (now.length() == end.length()) {
			for (int i = 0; i < end.length(); i++) {
				if (now.substring(i, i + 1).equals(end.substring(i, i + 1))) {
					sameChar++;
				}
			}
		}
		return sameChar;

	}

	class Entry implements Comparable {

		private Chain chain;

		public Entry(Chain chain) {
			this.chain = chain;
		}

		@Override
		public int compareTo(Object e) {
			if (numOfCharSame(chain.getLast()) > numOfCharSame(((Chain) e).getLast())) {
				return 1;
			} else if (numOfCharSame(chain.getLast()) < numOfCharSame(((Chain) e).getLast())) {
				return -1;
			} else {
				if (chain.length() > ((Chain) e).length()) {
					return -1;
				}
				return 1;
			}
		}

	}
}
