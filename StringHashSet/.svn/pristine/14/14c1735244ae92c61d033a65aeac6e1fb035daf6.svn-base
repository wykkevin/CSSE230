import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.NoSuchElementException;

/**
 * 
 * A hash set implementation for Strings. Cannot insert null into the set. Other
 * requirements are given with each method.
 *
 * @author Matt Boutell and Yuankai Wang. Created Oct 6, 2014.
 */
public class StringHashSet {

	// The initial size of the internal array.
	private static final int DEFAULT_CAPACITY = 5;
	private LinkedList<Node>[] table;
	private int totalSize;
	private int changes = 0;

	// You'll want fields for the size (number of elements) and the internal
	// array of Nodes. I also added one for the capacity (the length
	// of the internal array).

	private class Node {
		// DONE: Implement this class . These are just linked-list style
		// nodes, so you will need at least fields for the data and a reference
		// to the next node, plus a constructor. You can choose to use a
		// NULL_NODE at the end, or not. I chose not to do so this time.
		private String data;
		private Node next = null;

		public Node(String data) {
			this.data = data;
			this.next = null;
		}
	}

	/**
	 * Creates a Hash Set with the default capacity.
	 */
	public StringHashSet() {
		// Recall that using this as a method calls another constructor
		this(DEFAULT_CAPACITY);
	}

	/**
	 * Creates a Hash Set with the given capacity.
	 */
	public StringHashSet(int initialCapacity) {
		initialize(initialCapacity);
	}

	private void initialize(int initialCapacity) {
		// DONE: Set the capacity to the given capacity, and initialize the
		// other fields.
		// Why did we pull this out into a separate method? Perhaps another
		// method needs to initialize the hash set as well? (Hint)
		this.table = new LinkedList[initialCapacity];
		for (int i = 0; i < this.table.length; i++) {
			this.table[i] = new LinkedList<Node>();
		}
		this.totalSize = 0;
	}

	/**
	 * Calculates the hash code for Strings, using the x=31*x + y pattern.
	 * Follow the specification in the String.hashCode() method in the Java API.
	 * Note that the hashcode can overflow the max integer, so it can be
	 * negative. Later, in another method, you'll need to account for a negative
	 * hashcode by adding Integer.MAX_VALUE before you mod by the capacity
	 * (table size) to get the index.
	 *
	 * This method is NOT the place to calculate the index though.
	 *
	 * @param item
	 * @return The hash code for this String
	 */
	public static int stringHashCode(String item) {
		int output = 0;
		for (int i = 0; i < item.length(); i++) {
			output = output * 31 + item.charAt(i);
		}
		return output;
	}

	/**
	 * Adds a new node if it is not there already. If there is a collision, then
	 * add a new node to the -front- of the linked list.
	 * 
	 * Must operate in amortized O(1) time, assuming a good hashcode function.
	 *
	 * If the number of nodes in the hash table would be over double the
	 * capacity (that is, lambda > 2) as a result of adding this item, then
	 * first double the capacity and then rehash all the current items into the
	 * double-size table.
	 *
	 * @param item
	 * @return true if the item was successfully added (that is, if that hash
	 *         table was modified as a result of this call), false otherwise.
	 */
	public boolean add(String item) {
		if (!contains(item)) {
			this.totalSize++;
			this.changes++;
			if (((double) this.totalSize / this.table.length) > 2) {
				LinkedList<Node>[] temp = new LinkedList[this.table.length * 2];
				for (int k = 0; k < temp.length; k++) {
					temp[k] = new LinkedList<Node>();
				}
				for (int i = 0; i < this.table.length; i++) {
					for (int j = 0; j < this.table[i].size(); j++) {
						int hash = hashHelper(stringHashCode(this.table[i].get(j).data)) % temp.length;
						temp[hash].addFirst(this.table[i].get(j));
					}
				}
				this.table = temp;
			}
			int hash = hashHelper(stringHashCode(item)) % this.table.length;
			Node add = new Node(item);
			this.table[hash].addFirst(add);
			return true;
		}
		return false;
	}

	/**
	 * Prints an array value on each line. Each line will be an array index
	 * followed by a colon and a list of Node data values, ending in null. For
	 * example, inserting the strings in the testAddSmallCollisions example
	 * gives "0: shalom hola null 1 bonjour null 2 caio hello null 3 null 4 hi
	 * null". Use a StringBuilder, so you can build the string in O(n) time.
	 * (Repeatedly concatenating n strings onto a growing string gives O(n^2)
	 * time)
	 * 
	 * @return A slightly-formatted string, mostly used for debugging
	 */
	public String toRawString() {
		String output = "";
		for (int i = 0; i < this.table.length; i++) {
			output += i + ": ";
			if (this.table[i].size() > 0) {
				for (int j = 0; j < this.table[i].size(); j++) {
					output += this.table[i].get(j).data + " ";
				}
			}
			output += "null\n";
		}
		return output;
	}

	/**
	 * 
	 * Checks if the given item is in the hash table.
	 * 
	 * Must operate in O(1) time, assuming a good hashcode function.
	 *
	 * @param item
	 * @return True if and only if the item is in the hash table.
	 */
	public boolean contains(String item) {
		int hash = hashHelper(stringHashCode(item)) % this.table.length;
		for (int i = 0; i < this.table[hash].size(); i++) {
			if (this.table[hash].get(i).data.equals(item)) {
				return true;
			}
		}
		return false;
	}

	/**
	 * Returns the number of items added to the hash table. Must operate in O(1)
	 * time.
	 *
	 * @return The number of items in the hash table.
	 */
	public int size() {
		return this.totalSize;
	}

	/**
	 * @return True iff the hash table contains no items.
	 */
	public boolean isEmpty() {
		return this.size() == 0;
	}

	/**
	 * Removes all the items from the hash table. Resets the capacity to the
	 * DEFAULT_CAPACITY
	 */
	public void clear() {
		this.changes++;
		initialize(DEFAULT_CAPACITY);
	}

	/**
	 * Removes the given item from the hash table if it is there. You do NOT
	 * need to resize down if the load factor decreases below the threshold.
	 * 
	 * @param item
	 * @return True If the item was in the hash table (or equivalently, if the
	 *         table changed as a result).
	 */
	public boolean remove(String item) {
		int hash = hashHelper(stringHashCode(item)) % this.table.length;
		for (int i = 0; i < this.table[hash].size(); i++) {
			if (this.table[hash].get(i).data.equals(item)) {
				this.table[hash].remove(i);
				this.totalSize--;
				this.changes++;
				return true;
			}
		}
		return false;
	}

	/**
	 * Adds all the items from the given collection to the hash table.
	 *
	 * @param collection
	 * @return True if the hash table is modified in any way.
	 */
	public boolean addAll(Collection<String> collection) {
		for (String s : collection) {
			add(s);
		}
		return true;
	}

	/**
	 * 
	 * Challenge Feature: Returns an iterator over the set. Return the items in
	 * any order that you can do efficiently. Should throw a
	 * NoSuchElementException if there are no more items and next() is called.
	 * Should throw a ConcurrentModificationException if next() is called and
	 * the set has been mutated since the iterator was created.
	 *
	 * @return an iterator.
	 */
	public Iterator<String> iterator() {
		Iterator<String> iter = new Iter(this);
		return iter;
	}

	// Challenge Feature: If you have an iterator, this is easy. Use a
	// StringBuilder, so you can build the string in O(n) time. (Repeatedly
	// concatenating n strings onto a string gives O(n^2) time)
	// Format it like any other Collection's toString (like [a, b, c])
	@Override
	public String toString() {
		String output = "[";
		Iterator<String> iter = this.iterator();
		while (iter.hasNext()) {
			output += iter.next() + ", ";
		}
		output = output.substring(0, output.length() - 2);
		return output += "]";
	}

	public int hashHelper(int hash) {
		if (hash < 0) {
			hash += Integer.MAX_VALUE;
		}
		return hash;
	}

	class Iter implements Iterator<String> {

		private StringHashSet hashSet;
		private int count = 0;
		private int currentIndex = 0;
		private int linkedListIndex = 0;
		private int changesMade = 0;

		public Iter(StringHashSet hashSet) {
			this.hashSet = hashSet;
			this.changesMade = this.hashSet.changes;
		}

		@Override
		public boolean hasNext() {
			if (count < this.hashSet.totalSize) {
				return true;
			}
			return false;
		}

		@Override
		public String next() {
			if (this.hashSet.changes != this.changesMade) {
				throw new ConcurrentModificationException();
			}
			if (!hasNext()) {
				throw new NoSuchElementException();
			}
			if (this.hashSet.table[currentIndex] != null) {
				if (linkedListIndex < this.hashSet.table[currentIndex].size()) {
					count++;
					String output = this.hashSet.table[currentIndex].get(linkedListIndex).data;
					linkedListIndex++;
					return output;
				}
			}
			currentIndex++;
			linkedListIndex = 0;
			return next();
		}
	}
}
