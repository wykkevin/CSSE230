import java.util.Scanner;
import java.util.Set;

/**
 * @author <<TODO>>
 */
public class Doublets {
	private static LinksInterface links;
	private Chain chain;
	private int size = 0;
	private String start = "";
	private String end = "";
	private boolean hasStart = false;
	private boolean firstLoop = true;

	public Doublets(LinksInterface links) {
		this.links = links;
		this.chain = new Chain();
	}

	public static void main(String[] args) {
		System.out.println("Welcome to Doublets, a game of verbal torture.");
		Links links = new Links("english.cleaned.all.10.txt");
		Doublets doublets = new Doublets(links);
		while (true) {
			Scanner scanner = new Scanner(System.in);
			System.out.print("Enter starting word: ");
			String start = scanner.nextLine();
			System.out.print("Enter ending word: ");
			String end = scanner.nextLine();
			System.out.print("Enter chain manager (s: stack, q: queue, x: exit):");
			String managerString = scanner.nextLine();
			ChainManager manager;
			if (managerString.equals("s"))
				manager = new StackChainManager();
			else if (managerString.equals("q"))
				manager = new QueueChainManager();
			else if (managerString.equals("x"))
				break;
			else {
				System.out.println("wrong manager");
				continue;
			}

			if (!links.exists(start))
				System.out.println("no this word");
			else if (start.length() != end.length())
				System.out.println("different length");
			else {
				Chain chain = doublets.findChain(start, end, manager);
				System.out.println("finish");
			}
		}
	}

	public Chain findChain(String start, String end, ChainManager manager) {
		if (start.length() != end.length()) {
			return null;
		}
		chain = chain.addLast(start);
		manager.add(chain);
		size++;
		while (true) {
			chain = manager.next();
			manager.incrementNumNexts();
			size--;
			if (chain.getLast().equals(end)) {
				break;
			}
			Set<String> tempCandidates = links.getCandidates(chain.getLast());
			if (tempCandidates != null) {
				for (String s : tempCandidates) {
					if (!this.chain.contains(s)) {
						Chain pushChain = this.chain.addLast(s);
						manager.add(pushChain);
						size++;
						manager.updateMax(size);
					}
				}
			}
			if (size == 0) {
				return null;
			}
		}
		return chain;
	}
}
