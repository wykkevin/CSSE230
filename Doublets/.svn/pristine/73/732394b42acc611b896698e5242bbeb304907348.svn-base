import java.util.PriorityQueue;

public class PriorityQueueChainManager extends ChainManager {

	private PriorityQueue<Entry> priorityQueue = new PriorityQueue<Entry>();
	private String end;

	public PriorityQueueChainManager(String end) {
		this.end = end;
	}

	@Override
	public void add(Chain chain) {
		priorityQueue.offer(new Entry(chain));
		this.updateMax(this.priorityQueue.size());
	}

	@Override
	public Chain next() {
		Entry remove = this.priorityQueue.poll();
		this.incrementNumNexts();
		return remove.chain;
	}

	@Override
	public boolean isEmpty() {
		return priorityQueue.isEmpty();
	}

	private int numOfCharDiff(String now) {
		int diffChar = 0;
		if (now.length() == end.length()) {
			for (int i = 0; i < end.length(); i++) {
				if (!now.substring(i, i + 1).equals(end.substring(i, i + 1))) {
					diffChar++;
				}
			}
		}
		return diffChar;

	}

	class Entry implements Comparable<Entry> {

		private Chain chain;
		private int weight;

		public Entry(Chain chain) {
			this.chain = chain;
			this.weight = this.chain.length() + numOfCharDiff(this.chain.getLast());
		}

		public int getWeight() {
			return this.weight;
		}

		public Chain getChain() {
			return this.chain;
		}

		@Override
		public int compareTo(Entry e) {
			if (this.weight > e.weight) {
				return 1;
			} else if (this.weight == e.weight) {
				return 0;
			} else {
				return -1;
			}
		}

	}
}
