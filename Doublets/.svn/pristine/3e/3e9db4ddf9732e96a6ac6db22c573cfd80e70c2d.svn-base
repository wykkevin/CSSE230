import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class Links implements LinksInterface {

	private String fileName;
	private ArrayList<String> words;
	private HashMap<String, HashSet<String>> set;

	public Links(String fileName) {
		this.fileName = fileName;
		this.words = getFile();
		this.set = makeSet(this.words);
	}

	@Override
	public Set<String> getCandidates(String word) {
		return set.get(word);
	}

	@Override
	public boolean exists(String word) {
		for (int i = 0; i < this.words.size(); i++) {
			if (word.equals(this.words.get(i))) {
				return true;
			}
		}
		return false;
	}

	public ArrayList<String> getFile() {
		Scanner inscanner = null;
		ArrayList<String> wordsLoaded = new ArrayList<>();
		try {
			inscanner = new Scanner(new File(this.fileName));
			while (inscanner.hasNextLine()) {
				wordsLoaded.add(inscanner.nextLine());
			}
		} catch (FileNotFoundException exception) {
			System.out.println("No such file");
		}
		inscanner.close();
		return wordsLoaded;
	}

	public HashMap<String, HashSet<String>> makeSet(ArrayList<String> wordsLoaded) {
		HashMap<String, HashSet<String>> candidates = new HashMap<String, HashSet<String>>();
		for (int i = 0; i < wordsLoaded.size(); i++) {
			for (int j = 0; j < wordsLoaded.size(); j++) {
				int sameDigits = 0;
				if (wordsLoaded.get(i).length() == wordsLoaded.get(j).length()) {
					for (int k = 0; k < wordsLoaded.get(i).length(); k++) {
						if (wordsLoaded.get(i).substring(k, k + 1).equals(wordsLoaded.get(j).substring(k, k + 1))) {
							sameDigits++;
						}
					}
					if (sameDigits == wordsLoaded.get(i).length() - 1) {
						if (candidates.get(wordsLoaded.get(i)) == null) {
							HashSet<String> set = new HashSet<String>();
							set.add(wordsLoaded.get(j));
							candidates.put(wordsLoaded.get(i), set);
						} else {
							candidates.get(wordsLoaded.get(i)).add((wordsLoaded.get(j)));
						}
					}
				}
			}
		}
		return candidates;
	}
}
